{"version":3,"file":"graphql-svelte.esm.js","sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/mitt/dist/mitt.es.js","../src/graphqlFetchOptions.js","../node_modules/fnv1a/index.js","../src/hashObject.js","../src/GraphQL.js","../src/reportCacheErrors.js","../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/backo/index.js","../node_modules/symbol-observable/es/index.js","../node_modules/symbol-observable/es/ponyfill.js","../src/SubscribeQL.js","../node_modules/svelte/internal/index.mjs","../node_modules/svelte/store/index.mjs","../src/GraphQLSvelte.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","//      \n// An event handler can take an optional event argument\n// and should not return a value\n                                          \n                                                               \n\n// An array of all currently registered event handlers for a type\n                                            \n                                                            \n// A map of event types and their corresponding event handlers.\n                        \n                                 \n                                   \n  \n\n/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *  @name mitt\n *  @returns {Mitt}\n */\nfunction mitt(all                 ) {\n\tall = all || Object.create(null);\n\n\treturn {\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to listen for, or `\"*\"` for all events\n\t\t * @param  {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton: function on(type        , handler              ) {\n\t\t\t(all[type] || (all[type] = [])).push(handler);\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to unregister `handler` from, or `\"*\"`\n\t\t * @param  {Function} handler Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff: function off(type        , handler              ) {\n\t\t\tif (all[type]) {\n\t\t\t\tall[type].splice(all[type].indexOf(handler) >>> 0, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `\"*\"` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * @param {String} type  The event type to invoke\n\t\t * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit: function emit(type        , evt     ) {\n\t\t\t(all[type] || []).slice().map(function (handler) { handler(evt); });\n\t\t\t(all['*'] || []).slice().map(function (handler) { handler(type, evt); });\n\t\t}\n\t};\n}\n\nexport default mitt;\n//# sourceMappingURL=mitt.es.js.map\n","/**\n * Gets default [`fetch` options]{@link GraphQLFetchOptions} for a\n * [GraphQL operation]{@link GraphQLOperation}.\n * @param {GraphQLOperation} operation GraphQL operation.\n * @returns {GraphQLFetchOptions} [`fetch`](https://developer.mozilla.org/docs/Web/API/Fetch_API) options.\n * @ignore\n */\nexport function graphqlFetchOptions(operation) {\n  const fetchOptions = {\n    url: '/graphql',\n    method: 'POST',\n    headers: { Accept: 'application/json' }\n  }\n\n  fetchOptions.headers['Content-Type'] = 'application/json'\n  fetchOptions.body = JSON.stringify(operation)\n\n  return fetchOptions\n}\n","/**\n * Created by schwarzkopfb on 15/11/17.\n */\n\n/**\n * FNV-1a hash generation init value.\n * It's exposed, because this allows user to override it.\n *\n * @type {number}\n */\nhash.BASE = 0x811c9dc5\n\n/**\n * Generates 32 bit FNV-1a hash from the given string.\n * As explained here: http://isthe.com/chongo/tech/comp/fnv/\n *\n * @param s {string} String to generate hash from.\n * @returns {number} The result integer hash.\n */\nfunction hash(s) {\n    var h = hash.BASE\n\n    for (var i = 0, l = s.length; i < l; i++) {\n        h ^= s.charCodeAt(i)\n        h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24)\n    }\n\n    return h >>> 0\n}\n\nmodule.exports = hash\n","import fnv1a from 'fnv1a'\n\n/**\n * `JSON.stringify()` replacer that converts\n * [`FormData`](https://developer.mozilla.org/docs/Web/API/FormData) instances\n * into a signature string.\n * @param {string} key Property name.\n * @param {*} value Property value.\n * @returns {*} Original value or replaced value if it was a `FormData` instance.\n * @ignore\n */\nfunction hashObjectReplacer(key, value) {\n  // Retrieve the original value, and not the possible .toJSON() version. When a\n  // value has a .toJSON() method, JSON.stringify provides the replacer\n  // function with output of that instead of the original value. FormData\n  // instances in browsers do not have a .toJSON() method, but some polyfill\n  // implementations might.\n  // See: https://github.com/octet-stream/form-data/issues/2\n  const originalValue = this[key]\n\n  if (typeof FormData !== 'undefined' && originalValue instanceof FormData) {\n    // Value is a FormData instance. The idea is to return a string representing\n    // the unique signature of the form, to be hashed with the surrounding JSON\n    // string. Note that FormData forms can have multiple fields with the same\n    // name and that the order of form fields also determines the signature.\n\n    let signature = ''\n\n    const fields = originalValue.entries()\n\n    // Iterate manually using next() to avoid bulky for … of syntax\n    // transpilation.\n    let field = fields.next()\n    while (!field.done) {\n      const [name, value] = field.value\n\n      // If the value is a File or Blob instance, it should cast to a string\n      // like `[object File]`. It would be good if there was a way to signature\n      // File or Blob instances.\n      signature += `${name}${value}`\n\n      field = fields.next()\n    }\n\n    return signature\n  }\n\n  // Let JSON.stringify() stringify the value as normal.\n  return value\n}\n\n/**\n * Hashes an object.\n * @param {object} object A JSON serializable object that may contain [`FormData`](https://developer.mozilla.org/docs/Web/API/FormData) instances.\n * @returns {string} A hash.\n * @ignore\n */\nexport const hashObject = object =>\n  fnv1a(JSON.stringify(object, hashObjectReplacer)).toString(36)","import 'unfetch'\nimport mitt from 'mitt'\nimport { graphqlFetchOptions } from './graphqlFetchOptions.js'\nimport { hashObject } from './hashObject.js'\n/**\n * A lightweight GraphQL client that caches queries and mutations.\n * @kind class\n * @name GraphQL\n * @param {object} [options={}] Options.\n * @param {GraphQLCache} [options.cache={}] Cache to import; usually from a server side render.\n * @see [`reportCacheErrors`]{@link reportCacheErrors} to setup error reporting.\n * @example <caption>Construct a GraphQL client.</caption>\n * ```js\n * import { GraphQL } from 'graphql-svelte'\n *\n * const graphql = new GraphQL()\n * ```\n */\nexport class GraphQL {\n  constructor({ cache = {} } = {}) {\n    const { on, off, emit } = mitt()\n\n    /**\n     * Adds an event listener.\n     * @kind function\n     * @name GraphQL#on\n     * @param {string} type Event type.\n     * @param {Function} handler Event handler.\n     * @see [`reportCacheErrors`]{@link reportCacheErrors} can be used with this to setup error reporting.\n     */\n    this.on = on\n\n    /**\n     * Removes an event listener.\n     * @kind function\n     * @name GraphQL#off\n     * @param {string} type Event type.\n     * @param {Function} handler Event handler.\n     */\n    this.off = off\n\n    /**\n     * Emits an event with details to listeners.\n     * @param {string} type Event type.\n     * @param {*} [details] Event details.\n     * @ignore\n     */\n    this.emit = emit\n\n    /**\n     * Cache of loaded GraphQL operations. You probably don’t need to interact\n     * with this unless you’re implementing a server side rendering framework.\n     * @kind member\n     * @name GraphQL#cache\n     * @type {GraphQLCache}\n     * @example <caption>Export cache as JSON.</caption>\n     * ```js\n     * const exportedCache = JSON.stringify(graphql.cache)\n     * ```\n     * @example <caption>Example cache JSON.</caption>\n     * ```json\n     * {\n     *   \"a1bCd2\": {\n     *      \"data\": {\n     *        \"viewer\": {\n     *          \"name\": \"Jayden Seric\"\n     *        }\n     *      }\n     *   }\n     * }\n     * ```\n     */\n    this.cache = cache\n\n    /**\n     * A map of loading GraphQL operations. You probably don’t need to interact\n     * with this unless you’re implementing a server side rendering framework.\n     * @kind member\n     * @name GraphQL#operations\n     * @type {object.<GraphQLCacheKey, Promise<GraphQLCacheValue>>}\n     */\n    this.operations = {}\n  }\n\n  /**\n   * Signals that [GraphQL cache]{@link GraphQL#cache} subscribers such as the\n   * [`useGraphQL`]{@link useGraphQL} React hook should reload their GraphQL\n   * operation. Emits a [`GraphQL`]{@link GraphQL} instance `reload` event.\n   * @kind function\n   * @name GraphQL#reload\n   * @param {GraphQLCacheKey} [exceptCacheKey] A [GraphQL cache]{@link GraphQL#cache} [key]{@link GraphQLCacheKey} for cache to exempt from reloading.\n   * @example <caption>Reloading the [GraphQL cache]{@link GraphQL#cache}.</caption>\n   * ```js\n   * graphql.reload()\n   * ```\n   */\n  reload = exceptCacheKey => {\n    this.emit('reload', { exceptCacheKey })\n  }\n\n  /**\n   * Resets the [GraphQL cache]{@link GraphQL#cache}, useful when a user logs\n   * out. Emits a [`GraphQL`]{@link GraphQL} instance `reset` event.\n   * @kind function\n   * @name GraphQL#reset\n   * @param {GraphQLCacheKey} [exceptCacheKey] A [GraphQL cache]{@link GraphQL#cache} [key]{@link GraphQLCacheKey} for cache to exempt from deletion. Useful for resetting cache after a mutation, preserving the mutation cache.\n   * @example <caption>Resetting the [GraphQL cache]{@link GraphQL#cache}.</caption>\n   * ```js\n   * graphql.reset()\n   * ```\n   */\n  reset = exceptCacheKey => {\n    let cacheKeys = Object.keys(this.cache)\n\n    if (exceptCacheKey)\n      cacheKeys = cacheKeys.filter(hash => hash !== exceptCacheKey)\n\n    cacheKeys.forEach(cacheKey => delete this.cache[cacheKey])\n\n    // Emit cache updates after the entire cache has been updated, so logic in\n    // listeners can assume cache for all queries is fresh and stable.\n    this.emit('reset', { exceptCacheKey })\n  }\n\n  /**\n   * Fetches a GraphQL operation.\n   * @param {GraphQLFetchOptions} fetchOptions URL and options for [`fetch`](https://developer.mozilla.org/docs/Web/API/Fetch_API).\n   * @param {GraphQLCacheKey} cacheKey [GraphQL cache]{@link GraphQL#cache} [key]{@link GraphQLCacheKey}.\n   * @returns {Promise<GraphQLCacheValue>} A promise that resolves the [GraphQL cache]{@link GraphQL#cache} [value]{@link GraphQLCacheValue}.\n   * @ignore\n   */\n  fetch = ({ url, ...options }, cacheKey) => {\n    let fetchResponse\n\n    const fetcher =\n      typeof fetch === 'function'\n        ? fetch\n        : () =>\n          Promise.reject(\n            new Error('Global fetch API or polyfill unavailable.')\n          )\n    const cacheValue = {}\n    const cacheValuePromise = fetcher(url, options)\n      .then(\n        response => {\n          fetchResponse = response\n\n          if (!response.ok)\n            cacheValue.httpError = {\n              status: response.status,\n              statusText: response.statusText\n            }\n\n          return response.json().then(\n            ({ errors, data }) => {\n              // JSON parse ok.\n              if (!errors && !data) cacheValue.parseError = 'Malformed payload.'\n              if (errors) cacheValue.graphQLErrors = errors\n              if (data) cacheValue.data = data\n            },\n            ({ message }) => {\n              // JSON parse error.\n              cacheValue.parseError = message\n            }\n          )\n        },\n        ({ message }) => {\n          cacheValue.fetchError = message\n        }\n      )\n      .then(() => {\n        // Cache the operation.\n        if (!cacheValue.graphQLErrors && !cacheValue.parseError)\n          this.cache[cacheKey] = cacheValue\n\n        // If there are no more operations loading for this cache key, delete\n        // the empty array from the `operations` property.\n        if (!this.operations[cacheKey].length)\n          delete this.operations[cacheKey];\n\n        this.emit('cache', {\n          cacheKey, cacheValue,\n          // May be undefined if there was a fetch error.\n          response: fetchResponse\n        })\n\n        return cacheValue\n      })\n\n    this.operations[cacheKey] = cacheValuePromise\n\n    this.emit('fetch', { cacheKey, cacheValuePromise })\n\n    return cacheValuePromise\n  }\n\n  /**\n   * Loads or reuses an already loading GraphQL operation in\n   * [GraphQL operations]{@link GraphQL#operations}. Emits a\n   * [`GraphQL`]{@link GraphQL} instance `fetch` event if an already loading\n   * operation isn’t reused, and a `cache` event once it’s loaded into the\n   * [GraphQL cache]{@link GraphQL#cache}.\n   * @kind function\n   * @name GraphQL#operate\n   * @param {object} options Options.\n   * @param {GraphQLOperation} options.operation GraphQL operation.\n   * @param {GraphQLFetchOptionsOverride} [options.fetchOptionsOverride] Overrides default GraphQL operation [`fetch` options]{@link GraphQLFetchOptions}.\n   * @param {boolean} [options.reloadOnLoad=false] Should a [GraphQL reload]{@link GraphQL#reload} happen after the operation loads, excluding the loaded operation cache.\n   * @param {boolean} [options.resetOnLoad=false] Should a [GraphQL reset]{@link GraphQL#reset} happen after the operation loads, excluding the loaded operation cache.\n   * @returns {GraphQLOperationLoading} Loading GraphQL operation details.\n   */\n  operate = ({ operation, fetchOptionsOverride, reloadOnLoad, resetOnLoad }) => {\n    if (reloadOnLoad && resetOnLoad)\n      throw new Error('operate() options “reloadOnLoad” and “resetOnLoad” can’t both be true.')\n\n    const fetchOptions = graphqlFetchOptions(operation)\n    if (fetchOptionsOverride) fetchOptionsOverride(fetchOptions)\n    const cacheKey = hashObject(fetchOptions)\n    const cacheValuePromise =\n      // Use an identical existing request or…\n      this.operations[cacheKey] ||\n      // …make a fresh request.\n      this.fetch(fetchOptions, cacheKey)\n\n    // Potential edge-case issue: Multiple identical queries with resetOnLoad\n    // enabled will cause excessive resets.\n    cacheValuePromise.then(() => {\n      if (reloadOnLoad) this.reload(cacheKey)\n      else if (resetOnLoad) this.reset(cacheKey)\n    })\n\n    return {\n      cacheKey,\n      cacheValue: this.cache[cacheKey],\n      cacheValuePromise\n    }\n  }\n}\n","/**\n * A [`GraphQL`]{@link GraphQL} `cache` event handler that reports\n * [`fetch`](https://developer.mozilla.org/docs/Web/API/Fetch_API), HTTP, parse\n * and GraphQL errors via `console.log()`. In a browser environment the grouped\n * error details are expandable.\n * @kind function\n * @name reportCacheErrors\n * @param {object} data [`GraphQL`]{@link GraphQL} `cache` event data.\n * @param {GraphQLCacheKey} data.cacheKey [GraphQL cache]{@link GraphQL#cache} [key]{@link GraphQLCacheKey}.\n * @param {GraphQLCacheKey} data.cacheValue [GraphQL cache]{@link GraphQL#cache} [value]{@link GraphQLCacheValue}.\n * @example <caption>[`GraphQL`]{@link GraphQL} initialized to report cache errors.</caption>\n * ```js\n * import { GraphQL, reportCacheErrors } from 'graphql-react'\n *\n * const graphql = new GraphQL()\n * graphql.on('cache', reportCacheErrors)\n * ```\n */\nexport function reportCacheErrors({\n    cacheKey,\n    cacheValue: { fetchError, httpError, parseError, graphQLErrors }\n  }) {\n    if (fetchError || httpError || parseError || graphQLErrors) {\n      // eslint-disable-next-line no-console\n      console.groupCollapsed(`GraphQL cache errors for key “${cacheKey}”:`)\n  \n      if (fetchError) {\n        // eslint-disable-next-line no-console\n        console.groupCollapsed('Fetch:')\n  \n        // eslint-disable-next-line no-console\n        console.log(fetchError)\n  \n        // eslint-disable-next-line no-console\n        console.groupEnd()\n      }\n  \n      if (httpError) {\n        // eslint-disable-next-line no-console\n        console.groupCollapsed('HTTP:')\n  \n        // eslint-disable-next-line no-console\n        console.log(`Status: ${httpError.status}`)\n  \n        // eslint-disable-next-line no-console\n        console.log(`Text: ${httpError.statusText}`)\n  \n        // eslint-disable-next-line no-console\n        console.groupEnd()\n      }\n  \n      if (parseError) {\n        // eslint-disable-next-line no-console\n        console.groupCollapsed('Parse:')\n  \n        // eslint-disable-next-line no-console\n        console.log(parseError)\n  \n        // eslint-disable-next-line no-console\n        console.groupEnd()\n      }\n  \n      if (graphQLErrors) {\n        // eslint-disable-next-line no-console\n        console.groupCollapsed('GraphQL:')\n  \n        graphQLErrors.forEach(({ message }) =>\n          // eslint-disable-next-line no-console\n          console.log(message)\n        )\n  \n        // eslint-disable-next-line no-console\n        console.groupEnd()\n      }\n  \n      // eslint-disable-next-line no-console\n      console.groupEnd()\n    }\n  }","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","\n/**\n * Expose `Backoff`.\n */\n\nmodule.exports = Backoff;\n\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 10000;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\n\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\n\nBackoff.prototype.duration = function(){\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand =  Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\n\nBackoff.prototype.reset = function(){\n  this.attempts = 0;\n};\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\n\t\t\t// This just needs to be something that won't trample other user's Symbol.for use\n\t\t\t// It also will guide people to the source of their issues, if this is problematic.\n\t\t\t// META: It's a resource locator!\n\t\t\tresult = Symbol.for('https://github.com/benlesh/symbol-observable');\n\t\t\ttry {\n\t\t\t\tSymbol.observable = result;\n\t\t\t} catch (err) {\n\t\t\t\t// Do nothing. In some environments, users have frozen `Symbol` for security reasons,\n\t\t\t\t// if it is frozen assigning to it will throw. In this case, we don't care, because\n\t\t\t\t// they will need to use the returned value from the ponyfill.\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","\nimport Backoff from 'backo'\nimport mitt from 'mitt'\nimport $$observable from 'symbol-observable'\n\nconst WS_TIMEOUT = 30000\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\nfunction isObject(value) {\n  return value !== null && typeof value === 'object'\n}\n\nexport class SubscriptionClient {\n  constructor(url, options) {\n    const {\n      connectionCallback = undefined,\n      connectionParams = {},\n      timeout = WS_TIMEOUT,\n      reconnect = false,\n      reconnectionAttempts = Infinity,\n      lazy = false,\n      inactivityTimeout = 0\n    } = options || {}\n\n    this.wsImpl = WebSocket\n    this.connectionCallback = connectionCallback\n    this.url = url\n    this.operations = {}\n    this.nextOperationId = 0\n    this.wsTimeout = timeout\n    this.unsentMessagesQueue = []\n    this.reconnect = reconnect\n    this.reconnecting = false\n    this.reconnectionAttempts = reconnectionAttempts\n    this.lazy = !!lazy\n    this.inactivityTimeout = inactivityTimeout\n    this.closedByUser = false\n    this.backoff = new Backoff({ jitter: 0.5 })\n    this.eventEmitter = mitt()\n    this.client = null\n    this.maxConnectTimeGenerator = this.createMaxConnectTimeGenerator()\n    this.connectionParams = this.getConnectionParams(connectionParams)\n\n    if (!this.lazy) {\n      this.connect()\n    }\n  }\n\n  get status() {\n    if (this.client === null) {\n      return this.wsImpl.CLOSED\n    }\n\n    return this.client.readyState\n  }\n\n  close(isForced = true, closedByUser = true) {\n    this.clearInactivityTimeout()\n    if (this.client !== null) {\n      this.closedByUser = closedByUser\n\n      if (isForced) {\n        this.clearCheckConnectionInterval()\n        this.clearMaxConnectTimeout()\n        this.clearTryReconnectTimeout()\n        this.unsubscribeAll()\n        this.sendMessage(undefined, 'connection_terminate', null)\n      }\n\n      this.client.close()\n      this.client = null\n      this.eventEmitter.emit('disconnected')\n\n      if (!isForced) {\n        this.tryReconnect()\n      }\n    }\n  }\n\n  request(request) {\n    const getObserver = this.getObserver.bind(this)\n    const executeOperation = this.executeOperation.bind(this)\n    const unsubscribe = this.unsubscribe.bind(this)\n\n    let opId\n\n    this.clearInactivityTimeout()\n\n    return {\n      [$$observable.default ? $$observable.default : $$observable]() {\n        return this\n      },\n      subscribe(observerOrNext, onError, onComplete) {\n        const observer = getObserver(observerOrNext, onError, onComplete)\n        opId = executeOperation(request, (error, result) => {\n          if (error === null && result === null) {\n            if (observer.complete) {\n              observer.complete()\n            }\n          } else if (error) {\n            if (observer.error) {\n              observer.error(error[0])\n            }\n          } else {\n            if (observer.next) {\n              observer.next(result)\n            }\n          }\n        })\n\n        return {\n          unsubscribe: () => {\n            if (opId) {\n              unsubscribe(opId)\n              opId = null\n            }\n          }\n        }\n      }\n    }\n  }\n\n  on(eventName, callback, context) {\n    const handler = this.eventEmitter.on(eventName, callback, context)\n    return () => {\n      handler.off(eventName, callback, context)\n    }\n  }\n\n  onConnected(callback, context) {\n    return this.on('connected', callback, context)\n  }\n\n  onConnecting(callback, context) {\n    return this.on('connecting', callback, context)\n  }\n\n  onDisconnected(callback, context) {\n    return this.on('disconnected', callback, context)\n  }\n\n  onReconnected(callback, context) {\n    return this.on('reconnected', callback, context)\n  }\n\n  onReconnecting(callback, context) {\n    return this.on('reconnecting', callback, context)\n  }\n\n  onError(callback, context) {\n    return this.on('error', callback, context)\n  }\n\n  unsubscribeAll() {\n    Object.keys(this.operations).forEach(subId => {\n      this.unsubscribe(subId)\n    })\n  }\n\n  getConnectionParams(connectionParams) {\n    return () =>\n      new Promise((resolve, reject) => {\n        if (typeof connectionParams === 'function') {\n          try {\n            return resolve(connectionParams(null))\n          } catch (error) {\n            return reject(error)\n          }\n        }\n\n        resolve(connectionParams)\n      })\n  }\n\n  executeOperation(options, handler) {\n    if (this.client === null) {\n      this.connect()\n    }\n\n    const opId = this.generateOperationId()\n    this.operations[opId] = { options: options, handler }\n\n    try {\n      this.checkOperationOptions(options, handler)\n      if (this.operations[opId]) {\n        this.operations[opId] = { options, handler }\n        this.sendMessage(opId, 'start', options)\n      }\n    } catch (error) {\n      this.unsubscribe(opId)\n      handler(this.formatErrors(error))\n    }\n\n    return opId\n  }\n\n  getObserver(observerOrNext, error, complete) {\n    if (typeof observerOrNext === 'function') {\n      return {\n        next: v => observerOrNext(v),\n        error: e => error && error(e),\n        complete: () => complete && complete()\n      }\n    }\n    return observerOrNext\n  }\n\n  createMaxConnectTimeGenerator() {\n    const minValue = 1000\n    const maxValue = this.wsTimeout\n    return new Backoff({\n      min: minValue,\n      max: maxValue,\n      factor: 1.2\n    })\n  }\n\n  clearCheckConnectionInterval() {\n    if (this.checkConnectionIntervalId) {\n      clearInterval(this.checkConnectionIntervalId)\n      this.checkConnectionIntervalId = null\n    }\n  }\n\n  clearMaxConnectTimeout() {\n    if (this.maxConnectTimeoutId) {\n      clearTimeout(this.maxConnectTimeoutId)\n      this.maxConnectTimeoutId = null\n    }\n  }\n\n  clearTryReconnectTimeout() {\n    if (this.tryReconnectTimeoutId) {\n      clearTimeout(this.tryReconnectTimeoutId)\n      this.tryReconnectTimeoutId = null\n    }\n  }\n\n  clearInactivityTimeout() {\n    if (this.inactivityTimeoutId) {\n      clearTimeout(this.inactivityTimeoutId)\n      this.inactivityTimeoutId = null\n    }\n  }\n\n  setInactivityTimeout() {\n    if (\n      this.inactivityTimeout > 0 &&\n      Object.keys(this.operations).length === 0\n    ) {\n      this.inactivityTimeoutId = setTimeout(() => {\n        if (Object.keys(this.operations).length === 0) {\n          this.close()\n        }\n      }, this.inactivityTimeout)\n    }\n  }\n\n  checkOperationOptions(options, handler) {\n    const { query, variables, operationName } = options\n    if (!query) {\n      throw new Error('Must provide a query.')\n    }\n    if (!handler) {\n      throw new Error('Must provide an handler.')\n    }\n    if (\n      !isString(query) ||\n      (operationName && !isString(operationName)) ||\n      (variables && !isObject(variables))\n    ) {\n      throw new Error(\n        'Incorrect option types. query must be a string,' +\n        '`operationName` must be a string, and `variables` must be an object.'\n      )\n    }\n  }\n\n  buildMessage(id, type, payload) {\n    const payloadToReturn =\n      payload && payload.query\n        ? Object.assign({}, payload, {\n          query: payload.query\n        })\n        : payload\n    return {\n      id,\n      type,\n      payload: payloadToReturn\n    }\n  }\n\n  formatErrors(errors) {\n    if (Array.isArray(errors)) {\n      return errors\n    }\n    if (errors && errors.errors) {\n      return this.formatErrors(errors.errors)\n    }\n    if (errors && errors.message) {\n      return [errors]\n    }\n    return [\n      {\n        name: 'FormatedError',\n        message: 'Unknown error',\n        originalError: errors\n      }\n    ]\n  }\n\n  sendMessage(id, type, payload) {\n    this.sendMessageRaw(this.buildMessage(id, type, payload))\n  }\n\n  // send message, or queue it if connection is not open\n  sendMessageRaw(message) {\n    switch (this.status) {\n      case this.wsImpl.OPEN:\n        const serializedMessage = JSON.stringify(message)\n        try {\n          JSON.parse(serializedMessage)\n        } catch (error) {\n          this.eventEmitter.emit(\n            'error',\n            new Error(`Message must be JSON-serializable. Got: ${message}`)\n          )\n        }\n        this.client.send(serializedMessage)\n        break\n      case this.wsImpl.CONNECTING:\n        this.unsentMessagesQueue.push(message)\n        break\n      default:\n        if (!this.reconnecting) {\n          this.eventEmitter.emit(\n            'error',\n            new Error(\n              'A message was not sent because socket is not connected, is closing or ' +\n              'is already closed. Message was: ' +\n              JSON.stringify(message)\n            )\n          )\n        }\n    }\n  }\n\n  generateOperationId() {\n    return String(++this.nextOperationId)\n  }\n\n  tryReconnect() {\n    if (!this.reconnect || this.backoff.attempts >= this.reconnectionAttempts) {\n      return\n    }\n\n    if (!this.reconnecting) {\n      Object.keys(this.operations).forEach(key => {\n        this.unsentMessagesQueue.push(\n          this.buildMessage(key, 'start', this.operations[key].options)\n        )\n      })\n      this.reconnecting = true\n    }\n\n    this.clearTryReconnectTimeout()\n\n    const delay = this.backoff.duration()\n    this.tryReconnectTimeoutId = setTimeout(() => {\n      this.connect()\n    }, delay)\n  }\n\n  flushUnsentMessagesQueue() {\n    this.unsentMessagesQueue.forEach(message => {\n      this.sendMessageRaw(message)\n    })\n    this.unsentMessagesQueue = []\n  }\n\n  checkConnection() {\n    if (this.wasKeepAliveReceived) {\n      this.wasKeepAliveReceived = false\n      return\n    }\n\n    if (!this.reconnecting) {\n      this.close(false, true)\n    }\n  }\n\n  checkMaxConnectTimeout() {\n    this.clearMaxConnectTimeout()\n\n    // Max timeout trying to connect\n    this.maxConnectTimeoutId = setTimeout(() => {\n      if (this.status !== this.wsImpl.OPEN) {\n        this.reconnecting = true\n        this.close(false, true)\n      }\n    }, this.maxConnectTimeGenerator.duration())\n  }\n\n  connect() {\n    this.client = new WebSocket(this.url, 'graphql-ws')\n\n    this.checkMaxConnectTimeout()\n\n    this.client.addEventListener('open', async () => {\n      if (this.status === this.wsImpl.OPEN) {\n        this.clearMaxConnectTimeout()\n        this.closedByUser = false\n        this.eventEmitter.emit(\n          this.reconnecting ? 'reconnecting' : 'connecting'\n        )\n\n        try {\n          const connectionParams = await this.connectionParams()\n\n          // Send connection_init message, no need to wait for connection to success (reduce roundtrips)\n          this.sendMessage(undefined, 'connection_init', connectionParams)\n          this.flushUnsentMessagesQueue()\n        } catch (error) {\n          this.sendMessage(undefined, 'connection_error', error)\n          this.flushUnsentMessagesQueue()\n        }\n      }\n    })\n\n    this.client.onclose = () => {\n      if (!this.closedByUser) {\n        this.close(false, false)\n      }\n    }\n\n    this.client.addEventListener('error', error => {\n      // Capture and ignore errors to prevent unhandled exceptions, wait for\n      // onclose to fire before attempting a reconnect.\n      this.eventEmitter.emit('error', error)\n    })\n\n    this.client.addEventListener('message', ({ data }) => {\n      this.processReceivedData(data)\n    })\n  }\n\n  processReceivedData(receivedData) {\n    let parsedMessage\n    let opId\n\n    try {\n      parsedMessage = JSON.parse(receivedData)\n      opId = parsedMessage.id\n    } catch (error) {\n      throw new Error(`Message must be JSON-parseable. Got: ${receivedData}`)\n    }\n\n    if (\n      ['data', 'complete', 'error'].includes(parsedMessage.type) &&\n      !this.operations[opId]\n    ) {\n      this.unsubscribe(opId)\n\n      return\n    }\n\n    switch (parsedMessage.type) {\n      case 'connection_error':\n        if (this.connectionCallback) {\n          this.connectionCallback(parsedMessage.payload)\n        }\n        break\n\n      case 'connection_ack':\n        this.eventEmitter.emit(this.reconnecting ? 'reconnected' : 'connected')\n        this.reconnecting = false\n        this.backoff.reset()\n        this.maxConnectTimeGenerator.reset()\n\n        if (this.connectionCallback) {\n          this.connectionCallback()\n        }\n        break\n\n      case 'complete':\n        this.operations[opId].handler(null, null)\n        delete this.operations[opId]\n        break\n\n      case 'error':\n        this.operations[opId].handler(this.formatErrors(parsedMessage.payload),null)\n        delete this.operations[opId]\n        break\n\n      case 'data':\n        const parsedPayload = !parsedMessage.payload.errors ? parsedMessage.payload : {...parsedMessage.payload, errors: this.formatErrors(parsedMessage.payload.errors) }\n        this.operations[opId].handler(null, parsedPayload)\n        break\n\n      case 'ka':\n        const firstKA = typeof this.wasKeepAliveReceived === 'undefined'\n        this.wasKeepAliveReceived = true\n\n        if (firstKA) {\n          this.checkConnection()\n        }\n\n        if (this.checkConnectionIntervalId) {\n          clearInterval(this.checkConnectionIntervalId)\n          this.checkConnection()\n        }\n        this.checkConnectionIntervalId = setInterval(\n          this.checkConnection.bind(this),\n          this.wsTimeout\n        )\n        break\n\n      default:\n        throw new Error('Invalid message type!')\n    }\n  }\n\n  unsubscribe(opId) {\n    if (this.operations[opId]) {\n      delete this.operations[opId]\n      this.setInactivityTimeout()\n      this.sendMessage(opId, 'stop', undefined)\n    }\n  }\n}\n\n\n\n\nexport function SubscribeQL(url, options) {\n  return new SubscriptionClient(url, options);\n}\n","function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if (typeof $$scope.dirty === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j];\n                if (attributes[attribute.name]) {\n                    j++;\n                }\n                else {\n                    node.removeAttribute(attribute.name);\n                }\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    if (value != null || input.value) {\n        input.value = value;\n    }\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\nfunction add_resize_listener(element, fn) {\n    if (getComputedStyle(element).position === 'static') {\n        element.style.position = 'relative';\n    }\n    const object = document.createElement('object');\n    object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');\n    object.setAttribute('aria-hidden', 'true');\n    object.type = 'text/html';\n    object.tabIndex = -1;\n    let win;\n    object.onload = () => {\n        win = object.contentDocument.defaultView;\n        win.addEventListener('resize', fn);\n    };\n    if (/Trident/.test(navigator.userAgent)) {\n        element.appendChild(object);\n        object.data = 'about:blank';\n    }\n    else {\n        object.data = 'about:blank';\n        element.appendChild(object);\n    }\n    return {\n        cancel: () => {\n            win && win.removeEventListener && win.removeEventListener('resize', fn);\n            element.removeChild(object);\n        }\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(html, anchor = null) {\n        this.e = element('div');\n        this.a = anchor;\n        this.u(html);\n    }\n    m(target, anchor = null) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(target, this.n[i], anchor);\n        }\n        this.t = target;\n    }\n    u(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    p(html) {\n        this.d();\n        this.u(html);\n        this.m(this.t, this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nlet stylesheet;\nlet active = 0;\nlet current_rules = {};\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    if (!current_rules[name]) {\n        if (!stylesheet) {\n            const style = element('style');\n            document.head.appendChild(style);\n            stylesheet = style.sheet;\n        }\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    node.style.animation = (node.style.animation || '')\n        .split(', ')\n        .filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    )\n        .join(', ');\n    if (name && !--active)\n        clear_rules();\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        let i = stylesheet.cssRules.length;\n        while (i--)\n            stylesheet.deleteRule(i);\n        current_rules = {};\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nconst seen_callbacks = new Set();\nfunction flush() {\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (dirty_components.length) {\n            const component = dirty_components.shift();\n            set_current_component(component);\n            update(component.$$);\n        }\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined' ? window : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if ($$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(children(options.target));\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.18.1' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, validate_component, validate_each_keys, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe,\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { GraphQL } from './GraphQL';\nimport { graphqlFetchOptions } from './graphqlFetchOptions'\nimport { hashObject } from './hashObject'\nimport { SubscribeQL } from './SubscribeQL'\n\nimport { writable } from 'svelte/store';\nconst graphql = new GraphQL();\n\nfunction cacheWritable(initial, key) {\n  const {\n    subscribe,\n    set\n  } = writable(initial);\n  return {\n    subscribe,\n    set: (callback = (data) => data) => {\n      set(graphql.cache[key] = callback(graphql.cache[key]));\n    }\n  };\n}\n\nfunction getOrSet(fetchOptionsOverride, data, withCache = true, getKey = (key) => key) {\n  const fetchOptions = graphqlFetchOptions({ ...data });\n\n  fetchOptionsOverride(fetchOptions)\n  const has = hashObject(fetchOptions);\n  getKey(has);\n\n  if (graphql.cache[has] && graphql.cache[has].graphQLErrors) {\n    delete graphql.cache[has]\n  }\n\n  if (graphql.cache[has] && withCache) {\n    return new Promise(res => res(graphql.cache[has]));\n  }\n\n  const pending = graphql.operate({\n    fetchOptionsOverride,\n    operation: {\n      ...data\n    }\n  });\n  return pending.cacheValuePromise;\n}\n\n\nlet get = (fetchOptionsOverride, data, withCache = true) => {\n  return getOrSet(fetchOptionsOverride, data, withCache)\n}\n\nlet query = (fetchOptionsOverride, data, withCache = true) => {\n  let key = '';\n  let resolver;\n  const initial = new Promise(res => resolver = res);\n  getOrSet(fetchOptionsOverride, data, withCache, _key => key = _key).then(\n    result => {\n      dt.set(() => graphql.cache[key])\n      resolver(Promise.resolve(graphql.cache[key]))\n    }\n  );\n  const dt = cacheWritable(initial, key)\n\n  return dt;\n};\n\n\nconst initSub = (ws, headers) => new SubscribeQL(ws.url, {\n  reconnect: ws.reconnect || true,\n  lazy: ws.lazy || true,\n  ...ws.connectionParams ? { connectionParams: ws.connectionParams } : {\n    connectionParams: () => {\n      return { headers: { ...headers() } }\n    }\n  }\n});\n\nfunction restore(fetchOptionsOverride, data, cache) {\n  if (data) {\n    const fetchOptions = graphqlFetchOptions({\n      ...data\n    });\n    fetchOptionsOverride(fetchOptions)\n    const has = hashObject(fetchOptions);\n\n    if (graphql.cache[has]) {\n      graphql.cache[has] = cache\n    }\n    return graphql.cache[has]\n\n  }\n\n}\n\nconst subscribe = (sub, query) => {\n  return sub.request(query);\n}\n\nconst client = (options) => {\n  let cl = {};\n  if (!options.headers)\n    options.headers = { \"content-type\": \"application/json\" }\n  if (options.ws) {\n    let sub = initSub(options.ws, options.headers)\n    cl.subscription = sub;\n    cl.subscribe = (data) => subscribe(sub, data)\n  }\n  if (!options.url) {\n    throw new Error('graphql endpoint not set');\n  }\n\n  const fetchOptionsOverride = _options => {\n    (_options.url = options.url),\n      (_options.headers = options.headers());\n  };\n\n  cl.get = (data, cache) => get(fetchOptionsOverride, data, cache)\n  cl.restore = (data, cache) => restore(fetchOptionsOverride, data, cache)\n  cl.query = (data, cache) => query(fetchOptionsOverride, data, cache)\n  cl.mutate = (data, cache = false) => get(fetchOptionsOverride, data, cache)\n\n  cl = Object.assign(cl, graphql)\n  return {\n    ...cl\n  }\n}\n\n\n\n\nexport { client as GraphQLSvelte };\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","mitt","all","create","on","type","handler","push","off","splice","indexOf","emit","evt","slice","map","graphqlFetchOptions","operation","fetchOptions","url","method","headers","Accept","body","JSON","stringify","hash","s","h","BASE","i","l","length","charCodeAt","module","hashObjectReplacer","originalValue","this","FormData","signature","fields","entries","field","next","done","name","hashObject","object","fnv1a","toString","GraphQL","constructor","cache","exceptCacheKey","cacheKeys","keys","filter","forEach","cacheKey","options","fetchResponse","fetcher","fetch","Promise","reject","Error","cacheValue","cacheValuePromise","then","response","ok","httpError","status","statusText","json","errors","data","parseError","graphQLErrors","message","fetchError","operations","fetchOptionsOverride","reloadOnLoad","resetOnLoad","reload","reset","reportCacheErrors","console","groupCollapsed","log","groupEnd","_extends","assign","target","arguments","source","prototype","hasOwnProperty","call","apply","Backoff","opts","ms","min","max","factor","jitter","attempts","duration","Math","pow","rand","random","deviation","floor","result","root","Symbol","observable","for","err","ponyfill","self","window","global","Function","WS_TIMEOUT","isString","SubscriptionClient","connectionCallback","connectionParams","timeout","reconnect","reconnectionAttempts","Infinity","lazy","inactivityTimeout","wsImpl","WebSocket","nextOperationId","wsTimeout","unsentMessagesQueue","reconnecting","closedByUser","backoff","eventEmitter","client","maxConnectTimeGenerator","createMaxConnectTimeGenerator","getConnectionParams","connect","CLOSED","readyState","close","isForced","clearInactivityTimeout","clearCheckConnectionInterval","clearMaxConnectTimeout","clearTryReconnectTimeout","unsubscribeAll","sendMessage","undefined","tryReconnect","request","getObserver","bind","executeOperation","unsubscribe","opId","$$observable","default","subscribe","observerOrNext","onError","onComplete","observer","error","complete","eventName","callback","context","onConnected","onConnecting","onDisconnected","onReconnected","onReconnecting","subId","resolve","generateOperationId","checkOperationOptions","formatErrors","v","e","maxValue","checkConnectionIntervalId","clearInterval","maxConnectTimeoutId","clearTimeout","tryReconnectTimeoutId","inactivityTimeoutId","setInactivityTimeout","setTimeout","query","variables","operationName","buildMessage","id","payload","Array","isArray","originalError","sendMessageRaw","OPEN","serializedMessage","parse","send","CONNECTING","String","delay","flushUnsentMessagesQueue","checkConnection","wasKeepAliveReceived","checkMaxConnectTimeout","addEventListener","async","onclose","processReceivedData","receivedData","parsedMessage","includes","parsedPayload","firstKA","setInterval","SubscribeQL","noop","subscriber_queue","graphql","cacheWritable","initial","set","start","stop","subscribers","new_value","b","a","run_queue","update","fn","run","invalidate","subscriber","index","getOrSet","withCache","getKey","has","res","operate","get","cl","ws","sub","subscription","_options","restore","resolver","_key","dt","mutate"],"mappings":"AAAe,SAASA,EAAgBC,EAAKC,EAAKC,GAYhD,OAXID,KAAOD,EACTG,OAAOC,eAAeJ,EAAKC,EAAK,CAC9BC,MAAOA,EACPG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZP,EAAIC,GAAOC,EAGNF,ECOT,SAASQ,EAAKC,UACbA,EAAMA,GAAON,OAAOO,OAAO,MAEpB,CAQNC,GAAI,SAAYC,EAAcC,IAC5BJ,EAAIG,KAAUH,EAAIG,GAAQ,KAAKE,KAAKD,IAUtCE,IAAK,SAAaH,EAAcC,GAC3BJ,EAAIG,IACPH,EAAIG,GAAMI,OAAOP,EAAIG,GAAMK,QAAQJ,KAAa,EAAG,IAYrDK,KAAM,SAAcN,EAAcO,IAChCV,EAAIG,IAAS,IAAIQ,QAAQC,KAAI,SAAUR,GAAWA,EAAQM,OAC1DV,EAAI,MAAQ,IAAIW,QAAQC,KAAI,SAAUR,GAAWA,EAAQD,EAAMO,QClD5D,SAASG,EAAoBC,SAC5BC,EAAe,CACnBC,IAAK,WACLC,OAAQ,OACRC,QAAS,CAAEC,OAAQ,4BAGrBJ,EAAaG,QAAQ,gBAAkB,mBACvCH,EAAaK,KAAOC,KAAKC,UAAUR,GAE5BC,ECET,SAASQ,EAAKC,WACNC,EAAIF,EAAKG,KAEJC,EAAI,EAAGC,EAAIJ,EAAEK,OAAQF,EAAIC,EAAGD,IACjCF,GAAKD,EAAEM,WAAWH,GAClBF,IAAMA,GAAK,IAAMA,GAAK,IAAMA,GAAK,IAAMA,GAAK,IAAMA,GAAK,WAGpDA,IAAM,EAjBjBF,EAAKG,KAAO,WAoBZK,MAAiBR,ECnBjB,SAASS,EAAmBxC,EAAKC,SAOzBwC,EAAgBC,KAAK1C,MAEH,oBAAb2C,UAA4BF,aAAyBE,SAAU,KAMpEC,EAAY,SAEVC,EAASJ,EAAcK,cAIzBC,EAAQF,EAAOG,aACXD,EAAME,MAAM,OACXC,EAAMjD,GAAS8C,EAAM9C,MAK5B2C,aAAgBM,UAAOjD,GAEvB8C,EAAQF,EAAOG,cAGVJ,SAIF3C,EAST,MAAakD,EAAaC,GACxBC,EAAMxB,KAAKC,UAAUsB,EAAQZ,IAAqBc,SAAS,ICxCtD,MAAMC,EACXC,aAAYC,MAAEA,EAAQ,IAAO,oBA6EpBC,SACFzC,KAAK,SAAU,CAAEyC,eAAAA,qBAchBA,QACFC,EAAYzD,OAAO0D,KAAKlB,KAAKe,OAE7BC,IACFC,EAAYA,EAAUE,OAAO9B,GAAQA,IAAS2B,IAEhDC,EAAUG,QAAQC,UAAmBrB,KAAKe,MAAMM,SAI3C9C,KAAK,QAAS,CAAEyC,eAAAA,qBAUf,EAAGlC,IAAAA,KAAQwC,GAAWD,SACxBE,QAEEC,EACa,mBAAVC,MACHA,MACA,IACAC,QAAQC,OACN,IAAIC,MAAM,8CAEZC,EAAa,GACbC,EAAoBN,EAAQ1C,EAAKwC,GACpCS,KACCC,IACET,EAAgBS,EAEXA,EAASC,KACZJ,EAAWK,UAAY,CACrBC,OAAQH,EAASG,OACjBC,WAAYJ,EAASI,aAGlBJ,EAASK,OAAON,KACrB,EAAGO,OAAAA,EAAQC,KAAAA,MAEJD,GAAWC,IAAMV,EAAWW,WAAa,sBAC1CF,IAAQT,EAAWY,cAAgBH,GACnCC,IAAMV,EAAWU,KAAOA,IAE9B,EAAGG,QAAAA,MAEDb,EAAWW,WAAaE,KAI9B,EAAGA,QAAAA,MACDb,EAAWc,WAAaD,IAG3BX,KAAK,KAECF,EAAWY,eAAkBZ,EAAWW,aAC3CxC,KAAKe,MAAMM,GAAYQ,GAIpB7B,KAAK4C,WAAWvB,GAAU1B,eACtBK,KAAK4C,WAAWvB,QAEpB9C,KAAK,QAAS,CACjB8C,SAAAA,EAAUQ,WAAAA,EAEVG,SAAUT,IAGLM,gBAGNe,WAAWvB,GAAYS,OAEvBvD,KAAK,QAAS,CAAE8C,SAAAA,EAAUS,kBAAAA,IAExBA,qBAkBC,EAAGlD,UAAAA,EAAWiE,qBAAAA,EAAsBC,aAAAA,EAAcC,YAAAA,SACtDD,GAAgBC,EAClB,MAAM,IAAInB,MAAM,gFAEZ/C,EAAeF,EAAoBC,GACrCiE,GAAsBA,EAAqBhE,SACzCwC,EAAWZ,EAAW5B,GACtBiD,EAEJ9B,KAAK4C,WAAWvB,IAEhBrB,KAAKyB,MAAM5C,EAAcwC,UAI3BS,EAAkBC,KAAK,KACjBe,EAAc9C,KAAKgD,OAAO3B,GACrB0B,GAAa/C,KAAKiD,MAAM5B,KAG5B,CACLA,SAAAA,EACAQ,WAAY7B,KAAKe,MAAMM,GACvBS,kBAAAA,WAtNI9D,GAAEA,EAAFI,IAAMA,EAANG,KAAWA,GAASV,SAUrBG,GAAKA,OASLI,IAAMA,OAQNG,KAAOA,OAyBPwC,MAAQA,OASR6B,WAAa,aC/DNM,GAAkB7B,SAC9BA,EACAQ,YAAYc,WAAEA,EAAFT,UAAcA,EAAdM,WAAyBA,EAAzBC,cAAqCA,MAE7CE,GAAcT,GAAaM,GAAcC,KAE3CU,QAAQC,uDAAgD/B,SAEpDsB,IAEFQ,QAAQC,eAAe,UAGvBD,QAAQE,IAAIV,GAGZQ,QAAQG,YAGNpB,IAEFiB,QAAQC,eAAe,SAGvBD,QAAQE,sBAAenB,EAAUC,SAGjCgB,QAAQE,oBAAanB,EAAUE,aAG/Be,QAAQG,YAGNd,IAEFW,QAAQC,eAAe,UAGvBD,QAAQE,IAAIb,GAGZW,QAAQG,YAGNb,IAEFU,QAAQC,eAAe,YAEvBX,EAAcrB,QAAQ,EAAGsB,QAAAA,KAEvBS,QAAQE,IAAIX,IAIdS,QAAQG,YAIVH,QAAQG,qBC5EUC,IAetB,OAdAA,EAAW/F,OAAOgG,QAAU,SAAUC,GACpC,IAAK,IAAIhE,EAAI,EAAGA,EAAIiE,UAAU/D,OAAQF,IAAK,CACzC,IAAIkE,EAASD,UAAUjE,GAEvB,IAAK,IAAInC,KAAOqG,EACVnG,OAAOoG,UAAUC,eAAeC,KAAKH,EAAQrG,KAC/CmG,EAAOnG,GAAOqG,EAAOrG,IAK3B,OAAOmG,IAGOM,MAAM/D,KAAM0D,WCV9B7D,MAAiBmE,EAcjB,SAASA,EAAQC,GACfA,EAAOA,GAAQ,QACVC,GAAKD,EAAKE,KAAO,SACjBC,IAAMH,EAAKG,KAAO,SAClBC,OAASJ,EAAKI,QAAU,OACxBC,OAASL,EAAKK,OAAS,GAAKL,EAAKK,QAAU,EAAIL,EAAKK,OAAS,OAC7DC,SAAW,EAUlBP,EAAQJ,UAAUY,SAAW,eACvBN,EAAKlE,KAAKkE,GAAKO,KAAKC,IAAI1E,KAAKqE,OAAQrE,KAAKuE,eAC1CvE,KAAKsE,OAAQ,KACXK,EAAQF,KAAKG,SACbC,EAAYJ,KAAKK,MAAMH,EAAO3E,KAAKsE,OAASJ,GAChDA,EAAoC,IAAN,EAAxBO,KAAKK,MAAa,GAAPH,IAAwBT,EAAKW,EAAYX,EAAKW,SAEjC,EAAzBJ,KAAKN,IAAID,EAAIlE,KAAKoE,MAS3BJ,EAAQJ,UAAUX,MAAQ,gBACnBsB,SAAW,GCnClB,IAAIQ,ECjBW,SAAkCC,OAC5CD,EACAE,EAASD,EAAKC,UAEI,mBAAXA,KACNA,EAAOC,WACVH,EAASE,EAAOC,eACV,CAKNH,EAASE,EAAOE,IAAI,oDAEnBF,EAAOC,WAAaH,EACnB,MAAOK,UAOVL,EAAS,sBAGHA,EDRKM,CAZO,oBAATC,KACFA,KACoB,oBAAXC,OACTA,OACoB,oBAAXC,OACTA,OACoB,oBAAX3F,OACTA,OAEA4F,SAAS,cAATA,IETT,MAAMC,EAAa,IAEnB,SAASC,EAASpI,SACQ,iBAAVA,EAMhB,MAAaqI,EACX9E,YAAYhC,EAAKwC,SACTuE,mBACJA,EADIC,iBAEJA,EAAmB,GAFfC,QAGJA,EAAUL,EAHNM,UAIJA,GAAY,EAJRC,qBAKJA,EAAuBC,EAAAA,EALnBC,KAMJA,GAAO,EANHC,kBAOJA,EAAoB,GAClB9E,GAAW,QAEV+E,OAASC,eACTT,mBAAqBA,OACrB/G,IAAMA,OACN8D,WAAa,QACb2D,gBAAkB,OAClBC,UAAYT,OACZU,oBAAsB,QACtBT,UAAYA,OACZU,cAAe,OACfT,qBAAuBA,OACvBE,OAASA,OACTC,kBAAoBA,OACpBO,cAAe,OACfC,QAAU,IAAI5C,EAAQ,CAAEM,OAAQ,UAChCuC,aAAehJ,SACfiJ,OAAS,UACTC,wBAA0B/G,KAAKgH,qCAC/BlB,iBAAmB9F,KAAKiH,oBAAoBnB,GAE5C9F,KAAKmG,WACHe,8BAKa,OAAhBlH,KAAK8G,OACA9G,KAAKqG,OAAOc,OAGdnH,KAAK8G,OAAOM,WAGrBC,MAAMC,GAAW,EAAMX,GAAe,QAC/BY,yBACe,OAAhBvH,KAAK8G,cACFH,aAAeA,EAEhBW,SACGE,oCACAC,8BACAC,gCACAC,sBACAC,iBAAYC,EAAW,uBAAwB,YAGjDf,OAAOO,aACPP,OAAS,UACTD,aAAatI,KAAK,gBAElB+I,QACEQ,gBAKXC,QAAQA,SACAC,EAAchI,KAAKgI,YAAYC,KAAKjI,MACpCkI,EAAmBlI,KAAKkI,iBAAiBD,KAAKjI,MAC9CmI,EAAcnI,KAAKmI,YAAYF,KAAKjI,UAEtCoI,cAECb,yBAEE,EACJc,EAAaC,QAAUD,EAAaC,QAAUD,YACtCrI,MAETuI,UAAUC,EAAgBC,EAASC,SAC3BC,EAAWX,EAAYQ,EAAgBC,EAASC,UACtDN,EAAOF,EAAiBH,EAAS,CAACa,EAAO7D,KACzB,OAAV6D,GAA6B,OAAX7D,EAChB4D,EAASE,UACXF,EAASE,WAEFD,EACLD,EAASC,OACXD,EAASC,MAAMA,EAAM,IAGnBD,EAASrI,MACXqI,EAASrI,KAAKyE,KAKb,CACLoD,YAAa,KACPC,IACFD,EAAYC,GACZA,EAAO,UAQnBpK,GAAG8K,EAAWC,EAAUC,SAChB9K,EAAU8B,KAAK6G,aAAa7I,GAAG8K,EAAWC,EAAUC,SACnD,KACL9K,EAAQE,IAAI0K,EAAWC,EAAUC,IAIrCC,YAAYF,EAAUC,UACbhJ,KAAKhC,GAAG,YAAa+K,EAAUC,GAGxCE,aAAaH,EAAUC,UACdhJ,KAAKhC,GAAG,aAAc+K,EAAUC,GAGzCG,eAAeJ,EAAUC,UAChBhJ,KAAKhC,GAAG,eAAgB+K,EAAUC,GAG3CI,cAAcL,EAAUC,UACfhJ,KAAKhC,GAAG,cAAe+K,EAAUC,GAG1CK,eAAeN,EAAUC,UAChBhJ,KAAKhC,GAAG,eAAgB+K,EAAUC,GAG3CP,QAAQM,EAAUC,UACThJ,KAAKhC,GAAG,QAAS+K,EAAUC,GAGpCrB,iBACEnK,OAAO0D,KAAKlB,KAAK4C,YAAYxB,QAAQkI,SAC9BnB,YAAYmB,KAIrBrC,oBAAoBnB,SACX,IACL,IAAIpE,QAAQ,CAAC6H,EAAS5H,QACY,mBAArBmE,aAEAyD,EAAQzD,EAAiB,OAChC,MAAO8C,UACAjH,EAAOiH,GAIlBW,EAAQzD,KAIdoC,iBAAiB5G,EAASpD,GACJ,OAAhB8B,KAAK8G,aACFI,gBAGDkB,EAAOpI,KAAKwJ,2BACb5G,WAAWwF,GAAQ,CAAE9G,QAASA,EAASpD,QAAAA,YAGrCuL,sBAAsBnI,EAASpD,GAChC8B,KAAK4C,WAAWwF,UACbxF,WAAWwF,GAAQ,CAAE9G,QAAAA,EAASpD,QAAAA,QAC9B0J,YAAYQ,EAAM,QAAS9G,IAElC,MAAOsH,QACFT,YAAYC,GACjBlK,EAAQ8B,KAAK0J,aAAad,WAGrBR,EAGTJ,YAAYQ,EAAgBI,EAAOC,SACH,mBAAnBL,EACF,CACLlI,KAAMqJ,GAAKnB,EAAemB,GAC1Bf,MAAOgB,GAAKhB,GAASA,EAAMgB,GAC3Bf,SAAU,IAAMA,GAAYA,KAGzBL,EAGTxB,sCAEQ6C,EAAW7J,KAAKwG,iBACf,IAAIxC,EAAQ,CACjBG,IAHe,IAIfC,IAAKyF,EACLxF,OAAQ,MAIZmD,+BACMxH,KAAK8J,4BACPC,cAAc/J,KAAK8J,gCACdA,0BAA4B,MAIrCrC,yBACMzH,KAAKgK,sBACPC,aAAajK,KAAKgK,0BACbA,oBAAsB,MAI/BtC,2BACM1H,KAAKkK,wBACPD,aAAajK,KAAKkK,4BACbA,sBAAwB,MAIjC3C,yBACMvH,KAAKmK,sBACPF,aAAajK,KAAKmK,0BACbA,oBAAsB,MAI/BC,uBAEIpK,KAAKoG,kBAAoB,GACe,IAAxC5I,OAAO0D,KAAKlB,KAAK4C,YAAYjD,cAExBwK,oBAAsBE,WAAW,KACQ,IAAxC7M,OAAO0D,KAAKlB,KAAK4C,YAAYjD,aAC1B0H,SAENrH,KAAKoG,oBAIZqD,sBAAsBnI,EAASpD,SACvBoM,MAAEA,EAAFC,UAASA,EAATC,cAAoBA,GAAkBlJ,MACvCgJ,QACG,IAAI1I,MAAM,6BAEb1D,QACG,IAAI0D,MAAM,gCAGf+D,EAAS2E,IACTE,IAAkB7E,EAAS6E,IAC3BD,IApQY,QADDhN,EAqQYgN,IApQc,iBAAVhN,SAsQtB,IAAIqE,MACR,uHAxQR,IAAkBrE,EA8QhBkN,aAAaC,EAAIzM,EAAM0M,SAOd,CACLD,GAAAA,EACAzM,KAAAA,EACA0M,QARAA,GAAWA,EAAQL,MACf/G,EAAc,GAAIoH,EAAS,CAC3BL,MAAOK,EAAQL,QAEfK,GAQRjB,aAAapH,UACPsI,MAAMC,QAAQvI,GACTA,EAELA,GAAUA,EAAOA,OACZtC,KAAK0J,aAAapH,EAAOA,QAE9BA,GAAUA,EAAOI,QACZ,CAACJ,GAEH,CACL,CACE9B,KAAM,gBACNkC,QAAS,gBACToI,cAAexI,IAKrBsF,YAAY8C,EAAIzM,EAAM0M,QACfI,eAAe/K,KAAKyK,aAAaC,EAAIzM,EAAM0M,IAIlDI,eAAerI,UACL1C,KAAKmC,aACNnC,KAAKqG,OAAO2E,WACTC,EAAoB9L,KAAKC,UAAUsD,OAEvCvD,KAAK+L,MAAMD,GACX,MAAOrC,QACF/B,aAAatI,KAChB,QACA,IAAIqD,wDAAiDc,UAGpDoE,OAAOqE,KAAKF,cAEdjL,KAAKqG,OAAO+E,gBACV3E,oBAAoBtI,KAAKuE,iBAGzB1C,KAAK0G,mBACHG,aAAatI,KAChB,QACA,IAAIqD,MACF,yGAEAzC,KAAKC,UAAUsD,MAO3B8G,6BACS6B,SAASrL,KAAKuG,iBAGvBuB,mBACO9H,KAAKgG,WAAahG,KAAK4G,QAAQrC,UAAYvE,KAAKiG,4BAIhDjG,KAAK0G,eACRlJ,OAAO0D,KAAKlB,KAAK4C,YAAYxB,QAAQ9D,SAC9BmJ,oBAAoBtI,KACvB6B,KAAKyK,aAAanN,EAAK,QAAS0C,KAAK4C,WAAWtF,GAAKgE,iBAGpDoF,cAAe,QAGjBgB,iCAEC4D,EAAQtL,KAAK4G,QAAQpC,gBACtB0F,sBAAwBG,WAAW,UACjCnD,WACJoE,GAGLC,gCACO9E,oBAAoBrF,QAAQsB,SAC1BqI,eAAerI,UAEjB+D,oBAAsB,GAG7B+E,kBACMxL,KAAKyL,0BACFA,sBAAuB,EAIzBzL,KAAK0G,mBACHW,OAAM,GAAO,GAItBqE,8BACOjE,8BAGAuC,oBAAsBK,WAAW,KAChCrK,KAAKmC,SAAWnC,KAAKqG,OAAO2E,YACzBtE,cAAe,OACfW,OAAM,GAAO,KAEnBrH,KAAK+G,wBAAwBvC,YAGlC0C,eACOJ,OAAS,IAAIR,UAAUtG,KAAKlB,IAAK,mBAEjC4M,8BAEA5E,OAAO6E,iBAAiB,OAAQC,aAC/B5L,KAAKmC,SAAWnC,KAAKqG,OAAO2E,KAAM,MAC/BvD,8BACAd,cAAe,OACfE,aAAatI,KAChByB,KAAK0G,aAAe,eAAiB,wBAI/BZ,QAAyB9F,KAAK8F,wBAG/B8B,iBAAYC,EAAW,kBAAmB/B,QAC1CyF,2BACL,MAAO3C,QACFhB,iBAAYC,EAAW,mBAAoBe,QAC3C2C,oCAKNzE,OAAO+E,QAAU,KACf7L,KAAK2G,mBACHU,OAAM,GAAO,SAIjBP,OAAO6E,iBAAiB,QAAS/C,SAG/B/B,aAAatI,KAAK,QAASqK,UAG7B9B,OAAO6E,iBAAiB,UAAW,EAAGpJ,KAAAA,WACpCuJ,oBAAoBvJ,KAI7BuJ,oBAAoBC,OACdC,EACA5D,MAGF4D,EAAgB7M,KAAK+L,MAAMa,GAC3B3D,EAAO4D,EAActB,GACrB,MAAO9B,SACD,IAAIhH,qDAA8CmK,QAIxD,CAAC,OAAQ,WAAY,SAASE,SAASD,EAAc/N,OACpD+B,KAAK4C,WAAWwF,UAOX4D,EAAc/N,UACf,mBACC+B,KAAK6F,yBACFA,mBAAmBmG,EAAcrB,mBAIrC,sBACE9D,aAAatI,KAAKyB,KAAK0G,aAAe,cAAgB,kBACtDA,cAAe,OACfE,QAAQ3D,aACR8D,wBAAwB9D,QAEzBjD,KAAK6F,yBACFA,+BAIJ,gBACEjD,WAAWwF,GAAMlK,QAAQ,KAAM,aAC7B8B,KAAK4C,WAAWwF,aAGpB,aACExF,WAAWwF,GAAMlK,QAAQ8B,KAAK0J,aAAasC,EAAcrB,SAAS,aAChE3K,KAAK4C,WAAWwF,aAGpB,aACG8D,EAAiBF,EAAcrB,QAAQrI,OAAiC,IAAI0J,EAAcrB,QAASrI,OAAQtC,KAAK0J,aAAasC,EAAcrB,QAAQrI,SAAnG0J,EAAcrB,aAC/D/H,WAAWwF,GAAMlK,QAAQ,KAAMgO,aAGjC,WACGC,OAA+C,IAA9BnM,KAAKyL,0BACvBA,sBAAuB,EAExBU,QACGX,kBAGHxL,KAAK8J,4BACPC,cAAc/J,KAAK8J,gCACd0B,wBAEF1B,0BAA4BsC,YAC/BpM,KAAKwL,gBAAgBvD,KAAKjI,MAC1BA,KAAKwG,+BAKD,IAAI5E,MAAM,mCAzDbuG,YAAYC,GA6DrBD,YAAYC,GACNpI,KAAK4C,WAAWwF,YACXpI,KAAK4C,WAAWwF,QAClBgC,4BACAxC,YAAYQ,EAAM,YAAQP,KAQ9B,SAASwE,EAAYvN,EAAKwC,UACxB,IAAIsE,EAAmB9G,EAAKwC,YCzhB5BgL,KCGT,MAAMC,EAAmB,GCGzB,MAAMC,EAAU,IAAI3L,EAEpB,SAAS4L,EAAcC,EAASpP,SACxBiL,UACJA,EADIoE,IAEJA,GDQJ,SAAkBpP,EAAOqP,EAAQN,OACzBO,QACEC,EAAc,YACXH,EAAII,MDMUC,ECLOD,IDKVE,ECLG1P,IDMX0P,EAAID,GAAKA,EAAIC,IAAMD,GAAOC,GAAkB,iBAANA,GAAgC,mBAANA,KCLpE1P,EAAQwP,EACJF,GAAM,OACAK,GAAaX,EAAiB5M,WAC/B,IAAIF,EAAI,EAAGA,EAAIqN,EAAYnN,OAAQF,GAAK,EAAG,OACtCH,EAAIwN,EAAYrN,GACtBH,EAAE,KACFiN,EAAiBpO,KAAKmB,EAAG/B,MAEzB2P,EAAW,KACN,IAAIzN,EAAI,EAAGA,EAAI8M,EAAiB5M,OAAQF,GAAK,EAC9C8M,EAAiB9M,GAAG,GAAG8M,EAAiB9M,EAAI,IAEhD8M,EAAiB5M,OAAS,GDR9C,IAAwBsN,EAAGD,QCkChB,CAAEL,IAAAA,EAAKQ,gBArBEC,GACZT,EAAIS,EAAG7P,KAoBWgL,mBAlBH8E,EAAKC,EAAahB,SAC3BiB,EAAa,CAACF,EAAKC,UACzBR,EAAY3O,KAAKoP,GACU,IAAvBT,EAAYnN,SACZkN,EAAOD,EAAMD,IAAQL,GAEzBe,EAAI9P,GACG,WACGiQ,EAAQV,EAAYxO,QAAQiP,IACnB,IAAXC,GACAV,EAAYzO,OAAOmP,EAAO,GAEH,IAAvBV,EAAYnN,SACZkN,IACAA,EAAO,SC9CjBjP,CAAS8O,SACN,CACLnE,UAAAA,EACAoE,IAAK,CAAC5D,EAAYxG,CAAAA,GAASA,MACzBoK,EAAIH,EAAQzL,MAAMzD,GAAOyL,EAASyD,EAAQzL,MAAMzD,OAKtD,SAASmQ,EAAS5K,EAAsBN,EAAMmL,GAAY,EAAMC,EAAUrQ,CAAAA,GAAQA,UAC1EuB,EAAeF,EAAoB,IAAK4D,IAE9CM,EAAqBhE,SACf+O,EAAMnN,EAAW5B,MACvB8O,EAAOC,GAEHpB,EAAQzL,MAAM6M,IAAQpB,EAAQzL,MAAM6M,GAAKnL,sBACpC+J,EAAQzL,MAAM6M,GAGnBpB,EAAQzL,MAAM6M,IAAQF,SACjB,IAAIhM,QAAQmM,GAAOA,EAAIrB,EAAQzL,MAAM6M,YAG9BpB,EAAQsB,QAAQ,CAC9BjL,qBAAAA,EACAjE,UAAW,IACN2D,KAGQT,kBAIjB,IAAIiM,EAAM,CAAClL,EAAsBN,EAAMmL,GAAY,IAC1CD,EAAS5K,EAAsBN,EAAMmL,GA8C9C,MAIM5G,EAAUxF,QACV0M,EAAK,MACJ1M,EAAQtC,UACXsC,EAAQtC,QAAU,gBAAkB,qBAClCsC,EAAQ2M,GAAI,KACVC,GApCSD,EAoCK3M,EAAQ2M,GApCTjP,EAoCasC,EAAQtC,QApCT,IAAIqN,EAAY4B,EAAGnP,IAAK,CACvDkH,UAAWiI,EAAGjI,YAAa,EAC3BG,KAAM8H,EAAG9H,OAAQ,KACd8H,EAAGnI,iBAAmB,CAAEA,iBAAkBmI,EAAGnI,kBAAqB,CACnEA,iBAAkB,KACT,CAAE9G,QAAS,IAAKA,WAgCzBgP,EAAGG,aAAeD,EAClBF,EAAGzF,UAAahG,GAXF,EAAC2L,EAAK5D,IACf4D,EAAInG,QAAQuC,GAUQ/B,CAAU2F,EAAK3L,GAtC5B,IAAC0L,EAAIjP,MAwCdsC,EAAQxC,UACL,IAAI8C,MAAM,kCAGZiB,EAAuBuL,IAC1BA,EAAStP,IAAMwC,EAAQxC,IACrBsP,EAASpP,QAAUsC,EAAQtC,kBAGhCgP,EAAGD,IAAM,CAACxL,EAAMxB,IAAUgN,EAAIlL,EAAsBN,EAAMxB,GAC1DiN,EAAGK,QAAU,CAAC9L,EAAMxB,IAxCtB,SAAiB8B,EAAsBN,EAAMxB,MACvCwB,EAAM,OACF1D,EAAeF,EAAoB,IACpC4D,IAELM,EAAqBhE,SACf+O,EAAMnN,EAAW5B,UAEnB2N,EAAQzL,MAAM6M,KAChBpB,EAAQzL,MAAM6M,GAAO7M,GAEhByL,EAAQzL,MAAM6M,IA6BOS,CAAQxL,EAAsBN,EAAMxB,GAClEiN,EAAG1D,MAAQ,CAAC/H,EAAMxB,IAnER,EAAC8B,EAAsBN,EAAMmL,GAAY,SAE/CY,EADAhR,EAAM,SAEJoP,EAAU,IAAIhL,QAAQmM,GAAOS,EAAWT,GAC9CJ,EAAS5K,EAAsBN,EAAMmL,EAAWa,GAAQjR,EAAMiR,GAAMxM,KAClEgD,IACEyJ,EAAG7B,IAAI,IAAMH,EAAQzL,MAAMzD,IAC3BgR,EAAS5M,QAAQ6H,QAAQiD,EAAQzL,MAAMzD,aAGrCkR,EAAK/B,EAAcC,EAASpP,UAE3BkR,GAuDqBlE,CAAMzH,EAAsBN,EAAMxB,GAC9DiN,EAAGS,OAAS,CAAClM,EAAMxB,GAAQ,IAAUgN,EAAIlL,EAAsBN,EAAMxB,GAErEiN,EAAKzK,EAAcyK,EAAIxB,GAChB,IACFwB"}